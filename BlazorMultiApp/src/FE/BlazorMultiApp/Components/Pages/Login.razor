@page "/login"
@layout EmptyLayout
@rendermode InteractiveServer
@inject HttpClient httpClient
@inject NavigationManager navManager
@inject ToastService toastService
@inject IJSRuntime jsRuntime
@inject IHttpContextAccessor httpContextAccessor
@inject IAuthorizationService authorizationService

<div class="container my-4">
    <div class="col-lg-6 mx-auto">
        <EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmitAsync" novalidate>
            <DataAnnotationsValidator />

            <div class="form-group row mb-2">
                <div class="input-group">
                    <i class="bi bi-file-person fs-3 me-2"></i>
                    <InputText class="form-control" @bind-Value="authForm.Email" Placeholder="Enter Email" />
                </div>
                <ValidationMessage For="@(() => authForm.Email)" />
            </div>

            <div class="form-group row mb-2">
                <div class="input-group">
                    <i class="bi bi-key-fill fs-3 me-2"></i>
                    <InputText type="@(IsPasswordVisible ? "text" : "password")" class="form-control"
                        @bind-Value="authForm.Password" Placeholder="Enter password" />
                    <Button Type="ButtonType.Button" id="togglePassword" class="border"
                        @onclick="(() => IsPasswordVisible = !IsPasswordVisible)">
                        <i class="bi @(IsPasswordVisible ? "bi-eye" : "bi-eye-slash")" id="toggleIcon"></i>
                    </Button>
                </div>
                <ValidationMessage For="@(() => authForm.Password)" />
            </div>

            <div class="row">
                <div class="text-right">
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end w-25">Login</Button>
                    <a class="float-end me-2" href="@Constants.Routes.Register">Require an account?</a>
                </div>
            </div>
            <AntiforgeryToken />
        </EditForm>
    </div>
</div>

@code {
    public EditContext? editContext { get; set; }
    public AuthForm authForm { get; set; } = new();
    public bool IsPasswordVisible { get; set; } = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override void OnInitialized()
    {
        editContext = new EditContext(authForm);

        base.OnInitialized();
    }

    public async Task HandleValidSubmitAsync()
    {
        var toastMessage = new ToastMessage
        (
        type: ToastType.Success,
        iconName: IconName.Check2All,
        title: Constants.Messages.Success,
        message: Constants.Messages.SuccesfulLogin
        );

        var response = await httpClient.PostAsJsonAsync(Constants.Addresses.SignInEndpoint, authForm);

        if (response.IsSuccessStatusCode)
        {
            IEnumerable<string> cookies = response.Headers.SingleOrDefault(header => header.Key == "Set-Cookie").Value.First().Split(";");



            toastService.Notify(toastMessage);
            await Task.Delay(1500);
            navManager.NavigateTo("/auth-home");


            // authorizationService.AuthorizeAsync()
            @* Console.WriteLine(httpContextAccessor);
response = await httpClient.GetAsync(Constants.Addresses.TestAuthEndpoint);
Console.WriteLine(response); *@
        }
    }

    private void ResetForm()
    {
        authForm = new AuthForm();
        editContext = new EditContext(authForm);
    }

    public class AuthForm
    {
        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; }
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}
